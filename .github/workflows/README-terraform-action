
To Do list:
Remember to adjust the gitHub Actions workflow script to dynamically generate the lambda_function_payload.zip file from the generate_random_data.py script and ensure it is present in the DEVOPS_Exercise_Statement_2/terraform_setup directory before running Terraform commands, so I may need to add a new step before the Terraform initialization step. This new step will zip the generate_random_data.py file and move the resulting lambda_function_payload.zip into the correct directory(line 17-25)

<<<<<<< HEAD
Please note that the AWS environments where i am currently at are extremelly monitored, therefore I will not be able to test my terraform code. So ill need to find an alternative way to test the Terraform exercises.
=======
Please note that the AWS environments where i am currently at are extremelly monitored, therefore I will not be able to test my terraform code.
>>>>>>> hot-fix-branch


Handling errors:
Because i am not allowed to use the credentials from the company i currently work for the terraform GitHub Actions workflow is causing errors particularly in operations that require valid AWS credentials, 

Possible Workaround:
# i can introduce conditional logic to differentiate between operations that need real AWS interactions and those that can be performed with dummy credentials 

Using LocalStack for AWS API Mocking
# LocalStack provides a fully functional local AWS cloud stack for testing and mocking cloud development. You can run terraform plan against LocalStack to simulate AWS resources without requiring real AWS credentials. Integration into GitHub Actions would require running LocalStack as part of your CI pipeline.

<<<<<<< HEAD
Improvements to be considered
 there are several improvements and best practices that still needed to be apply to enhance its efficiency, readability, and functionality:

Use Latest Versions:

Update the hashicorp/setup-terraform action to the latest version to take advantage of the latest features and fixes.
Consider using the latest LocalStack image by specifying image: localstack/localstack:latest unless you have a specific reason to pin to an older version.


Cache Terraform Modules and Plugins:

Implement caching for Terraform plugins and modules to speed up the workflow execution.

- name: Cache Terraform Modules
  uses: actions/cache@v2
  with:
    path: |
      ~/.terraform.d/plugin-cache
      .terraform
    key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
    restore-keys: |
      ${{ runner.os }}-terraform-


Parameterize Common Values:

Use GitHub Actions environment variables for common or repeated values, such as the Terraform version or AWS region, to make the workflow easier to update.

env:
  TERRAFORM_VERSION: 0.14.9
  AWS_REGION: us-east-1
Dynamic Terraform Version:

Instead of hardcoding the Terraform version, consider making it dynamic or configurable through GitHub Actions inputs or environment variables.
Improve Security Practices:

If using real AWS credentials (not applicable in this case with LocalStack, but relevant for real deployments), ensure they have the least privilege necessary.
Use GitHub encrypted secrets for sensitive information (already done for AWS credentials, but important to highlight).


Include Terraform Validation and Formatting:

Before running terraform plan, include steps to validate (terraform validate) and format (terraform fmt -check) your Terraform configurations to catch common errors and ensure code quality.

- name: Terraform Format Check
  run: terraform fmt -check
  working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

- name: Terraform Validate
  run: terraform validate
  working-directory: DEVOPS_Exercise_Statement_2/terraform_setup


Integration Testing:

After deploying with LocalStack, consider adding steps to run integration tests against my LocalStack services to ensure the infrastructure is configured as expected.
Cleanup Resources:

After tests, ensure to clean up any resources created within LocalStack to prevent conflicts in subsequent runs.
By applying these improvements, i would enhance the maintainability, efficiency, and reliability of the CI/CD pipeline for Terraform with LocalStack in GitHub Actions.
=======
>>>>>>> hot-fix-branch


#######################################################################################################
This was the original workflow but since it was giving error due to not having a valid AWS credential I had to change it localStack integration for testing purposes. So ill keep it here in case i may need to reuse it.

name: Terraform

on:
  push:
    branches:
      - DEVOPS_Exercise_Statement_2  # Trigger on pushes to this branch

jobs:
  terraform-local:
    name: Terraform Local Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/DEVOPS_Exercise_Statement_2' && github.event_name == 'push'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Package Lambda Function
      run: |
        mkdir -p package
        cp DEVOPS_Exercise_Statement_2/python_random_data/generate_random_data.py package/
        cd package
        zip -r ../DEVOPS_Exercise_Statement_2/terraform_setup/lambda_function_payload.zip .
        cd ..
        rm -rf package
      working-directory: ${{ github.workspace }}

    # Configure dummy AWS credentials for testing purposes
    - name: Configure AWS Dummy Credentials
      run: |
        aws configure set aws_access_key_id dummy-access-key
        aws configure set aws_secret_access_key dummy-secret-key
        aws configure set default.region us-east-1
      env:
        AWS_ACCESS_KEY_ID: 'dummy-access-key'
        AWS_SECRET_ACCESS_KEY: 'dummy-secret-key'
        AWS_DEFAULT_REGION: 'us-east-1'

    - name: Setup Terraform for Local
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9

    - name: Terraform Init (Local)
      run: terraform init
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Plan (Local) # Changed to terraform plan for demonstration
      run: terraform plan
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Output (Local)
      run: terraform output
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

  terraform-aws:
    name: Terraform AWS Deploy
    runs-on: ubuntu-latest
    needs: terraform-local
    if: github.ref == 'refs/heads/DEVOPS_Exercise_Statement_2' && github.event_name == 'push'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    # The real AWS credentials setup for actual deployment
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform for AWS
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9

    - name: Terraform Init (AWS)
      run: terraform init
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    # Ensure this is changed back to terraform apply when ready for deployment
    - name: Terraform Apply (AWS)
      run: terraform apply -auto-approve -var 'deployment_type=aws'
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Output (AWS)
      run: terraform output
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup
#######################################################################################################
