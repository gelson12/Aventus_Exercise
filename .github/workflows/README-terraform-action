
To Do list:
Remember to adjust the gitHub Actions workflow script to dynamically generate the lambda_function_payload.zip file from the generate_random_data.py script and ensure it is present in the DEVOPS_Exercise_Statement_2/terraform_setup directory before running Terraform commands, so I may need to add a new step before the Terraform initialization step. This new step will zip the generate_random_data.py file and move the resulting lambda_function_payload.zip into the correct directory(line 17-25)

Please note that the AWS environments where i am currently at are extremelly monitored, therefore I will not be able to test my terraform code.


Handling errors:
Because i am not allowed to use the credentials from the company i currently work for the terraform GitHub Actions workflow is causing errors particularly in operations that require valid AWS credentials, 

Possible Workaround:
# i can introduce conditional logic to differentiate between operations that need real AWS interactions and those that can be performed with dummy credentials 

Using LocalStack for AWS API Mocking
# LocalStack provides a fully functional local AWS cloud stack for testing and mocking cloud development. You can run terraform plan against LocalStack to simulate AWS resources without requiring real AWS credentials. Integration into GitHub Actions would require running LocalStack as part of your CI pipeline.



#######################################################################################################
This was the original workflow but since it was giving error due to not having a valid AWS credential I had to change it localStack integration

name: Terraform

on:
  push:
    branches:
      - DEVOPS_Exercise_Statement_2  # Trigger on pushes to this branch

jobs:
  terraform-local:
    name: Terraform Local Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/DEVOPS_Exercise_Statement_2' && github.event_name == 'push'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Package Lambda Function
      run: |
        mkdir -p package
        cp DEVOPS_Exercise_Statement_2/python_random_data/generate_random_data.py package/
        cd package
        zip -r ../DEVOPS_Exercise_Statement_2/terraform_setup/lambda_function_payload.zip .
        cd ..
        rm -rf package
      working-directory: ${{ github.workspace }}

    # Configure dummy AWS credentials for testing purposes
    - name: Configure AWS Dummy Credentials
      run: |
        aws configure set aws_access_key_id dummy-access-key
        aws configure set aws_secret_access_key dummy-secret-key
        aws configure set default.region us-east-1
      env:
        AWS_ACCESS_KEY_ID: 'dummy-access-key'
        AWS_SECRET_ACCESS_KEY: 'dummy-secret-key'
        AWS_DEFAULT_REGION: 'us-east-1'

    - name: Setup Terraform for Local
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9

    - name: Terraform Init (Local)
      run: terraform init
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Plan (Local) # Changed to terraform plan for demonstration
      run: terraform plan
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Output (Local)
      run: terraform output
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

  terraform-aws:
    name: Terraform AWS Deploy
    runs-on: ubuntu-latest
    needs: terraform-local
    if: github.ref == 'refs/heads/DEVOPS_Exercise_Statement_2' && github.event_name == 'push'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    # The real AWS credentials setup for actual deployment
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform for AWS
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9

    - name: Terraform Init (AWS)
      run: terraform init
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    # Ensure this is changed back to terraform apply when ready for deployment
    - name: Terraform Apply (AWS)
      run: terraform apply -auto-approve -var 'deployment_type=aws'
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

    - name: Terraform Output (AWS)
      run: terraform output
      working-directory: DEVOPS_Exercise_Statement_2/terraform_setup

