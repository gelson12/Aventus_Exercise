Step 1: Scripting

### Python Script (generate_random_data.py)
First, created a Python script named generate_random_data.py. This script will generate random data and can be invoked by an AWS Lambda function.


Step 2: Terraform Setup

### AWS Lambda Function ( main.tf )
Create a Terraform script to deploy the Lambda function. This script will package the Python script and create a Lambda function. theres also the need to define the IAM role that gives the Lambda function permission to write to S3.

provider "aws" {
  region = "us-east-1"
}

resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "lambda.amazonaws.com",
      },
    }],
  })

  # Lambda needs to write to an S3 bucket, adding the necessary permissions.
  inline_policy {
    name = "write_to_s3"
    policy = jsonencode({
      Version = "2012-10-17",
      Statement = [{
        Action = [
          "s3:PutObject",
        ],
        Effect = "Allow",
        Resource = "arn:aws:s3:::aventus-bucket-in-account-b/*",
      }],
    })
  }
}

resource "aws_lambda_function" "my_lambda" {
  filename         = "lambda_function_payload.zip"
  function_name    = "my_random_data_generator"
  role             = aws_iam_role.lambda_execution_role.arn
  handler          = "generate_random_data.lambda_handler"
  source_code_hash = filebase64sha256("lambda_function_payload.zip")
  runtime          = "python3.8"
}


I might create a sub-script within the "terraform-action.yml" action workflow to zip the Python script (generate_random_data.py) into lambda_function_payload.zip and move it to the terraform directory.

### Defining an AWS API Gateway to trigger the Lambda function ( AWS_API_Gateway.tf )

resource "aws_api_gateway_rest_api" "AventusAPI" {
  name        = "AventusAPI"
  description = "This is my API for demonstration purposes"
}

resource "aws_api_gateway_resource" "AventusResource" {
  rest_api_id = aws_api_gateway_rest_api.AventusAPI.id
  parent_id   = aws_api_gateway_rest_api.AventusAPI.root_resource_id
  path_part   = "Aventusresource"
}

resource "aws_api_gateway_method" "AventusMethod" {
  rest_api_id   = aws_api_gateway_rest_api.AventusAPI.id
  resource_id   = aws_api_gateway_resource.AventusResource.id
  http_method   = "GET"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "LambdaIntegration" {
  rest_api_id = aws_api_gateway_rest_api.AventusAPI.id
  resource_id = aws_api_gateway_resource.AventusResource.id
  http_method = aws_api_gateway_method.AventusMethod.http_method

  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.my_lambda.invoke_arn
}


### Cross-Account S3 Access ( Cross_Account_S3_Access.tf )
Handling cross-account permissions for S3 involves setting up an S3 bucket policy that allows the Lambda function in Account A to write to the S3 bucket in Account B.

In the S3 bucket's Terraform configuration in Account B:
resource "aws_s3_bucket" "b" {
  bucket = "aventus-bucket-in-account-b"
  acl    = "private"

  policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::123456789012:role/lambda_execution_role"
      },
      "Action": "s3:PutObject",
      "Resource": "arn:aws:s3:::aventus-bucket-in-account-b/*"
    }
  ]
}
POLICY
}

Since I am not allowed to use my current employers AWS account I will need to make the code a slightly generic like Making sure that ill replace "123456789012" with the actual AWS Account ID where my Lambda function will resides if i am provided with an aws account to test the code

So for testing purposes Replace  with your actual AWS Account ID where the Lambda function resides.


### Custom Domain for API Gateway
To configure a custom domain for AWS API Gateway and set up the necessary resources, including domain name, SSL certificate (managed by AWS ACM), and custom domain name resources in API Gateway

Step 1: Request or Import an SSL Certificate in AWS Certificate Manager (ACM)

resource "aws_acm_certificate" "my_cert" {
  domain_name       = "aventus.com"
  validation_method = "DNS"

  tags = {
    Environment = "production"
  }

  lifecycle {
    create_before_destroy = true
  }
}


Step 2: Configure the Custom Domain in API Gateway
After obtaining SSL certificate ready and validated, i can configure the custom domain in API Gateway.

resource "aws_api_gateway_domain_name" "my_custom_domain" {
  domain_name              = "api.aventus.com"
  certificate_arn          = aws_acm_certificate.my_cert.arn

  endpoint_configuration {
    types = ["EDGE"] # or REGIONAL based on your requirement
  }
}

Step 3: Set Up Base Path Mapping
unfortunatly running out of time but i would likely want to map my API's deployment stage to the root (or another base path) of my custom domain.

resource "aws_api_gateway_base_path_mapping" "my_base_path_mapping" {
  api_id      = aws_api_gateway_rest_api.aventusAPI.id
  stage_name  = "prod"
  domain_name = aws_api_gateway_domain_name.my_custom_domain.domain_name
}

Replace "prod" with your API's deployment stage name.



Step 4: Route 53 DNS Configuration for the Custom Domain
To route traffic to my custom domain, I'll need a DNS record in Route 53 or your DNS provider.

using AWS Route 53 and my domain is managed there:

resource "aws_route53_record" "api_dns" {
  zone_id = aws_route53_zone.my_zone.zone_id
  name    = "api.aventus.com"
  type    = "A"

  alias {
    name                   = aws_api_gateway_domain_name.my_custom_domain.cloudfront_domain_name
    zone_id                = aws_api_gateway_domain_name.my_custom_domain.cloudfront_zone_id
    evaluate_target_health = true
  }
}

This Terraform configuration sets up a custom domain for the API Gateway, enabling access to the API via https://api.aventus.com. 